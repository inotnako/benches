// Code generated by protoc-gen-go.
// source: grpc/proto/servicepq.proto
// DO NOT EDIT!

/*
Package yupi is a generated protocol buffer package.

It is generated from these files:
	grpc/proto/servicepq.proto

It has these top-level messages:
	MessageRequest
	MessageResponse
*/
package yupi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MessageRequest struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *MessageRequest) Reset()                    { *m = MessageRequest{} }
func (m *MessageRequest) String() string            { return proto.CompactTextString(m) }
func (*MessageRequest) ProtoMessage()               {}
func (*MessageRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type MessageResponse struct {
	Id   int64  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Time string `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
}

func (m *MessageResponse) Reset()                    { *m = MessageResponse{} }
func (m *MessageResponse) String() string            { return proto.CompactTextString(m) }
func (*MessageResponse) ProtoMessage()               {}
func (*MessageResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*MessageRequest)(nil), "yupi.MessageRequest")
	proto.RegisterType((*MessageResponse)(nil), "yupi.MessageResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Creator service

type CreatorClient interface {
	// метод позволяет сервисам реистриваться сервисам
	// для того чтобы потом их можно было использовать инспектору
	Create(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error)
	CreateByStream(ctx context.Context, opts ...grpc.CallOption) (Creator_CreateByStreamClient, error)
}

type creatorClient struct {
	cc *grpc.ClientConn
}

func NewCreatorClient(cc *grpc.ClientConn) CreatorClient {
	return &creatorClient{cc}
}

func (c *creatorClient) Create(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*MessageResponse, error) {
	out := new(MessageResponse)
	err := grpc.Invoke(ctx, "/yupi.Creator/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *creatorClient) CreateByStream(ctx context.Context, opts ...grpc.CallOption) (Creator_CreateByStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Creator_serviceDesc.Streams[0], c.cc, "/yupi.Creator/CreateByStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &creatorCreateByStreamClient{stream}
	return x, nil
}

type Creator_CreateByStreamClient interface {
	Send(*MessageRequest) error
	Recv() (*MessageResponse, error)
	grpc.ClientStream
}

type creatorCreateByStreamClient struct {
	grpc.ClientStream
}

func (x *creatorCreateByStreamClient) Send(m *MessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *creatorCreateByStreamClient) Recv() (*MessageResponse, error) {
	m := new(MessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Creator service

type CreatorServer interface {
	// метод позволяет сервисам реистриваться сервисам
	// для того чтобы потом их можно было использовать инспектору
	Create(context.Context, *MessageRequest) (*MessageResponse, error)
	CreateByStream(Creator_CreateByStreamServer) error
}

func RegisterCreatorServer(s *grpc.Server, srv CreatorServer) {
	s.RegisterService(&_Creator_serviceDesc, srv)
}

func _Creator_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreatorServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yupi.Creator/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreatorServer).Create(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Creator_CreateByStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CreatorServer).CreateByStream(&creatorCreateByStreamServer{stream})
}

type Creator_CreateByStreamServer interface {
	Send(*MessageResponse) error
	Recv() (*MessageRequest, error)
	grpc.ServerStream
}

type creatorCreateByStreamServer struct {
	grpc.ServerStream
}

func (x *creatorCreateByStreamServer) Send(m *MessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *creatorCreateByStreamServer) Recv() (*MessageRequest, error) {
	m := new(MessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Creator_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yupi.Creator",
	HandlerType: (*CreatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Creator_Create_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CreateByStream",
			Handler:       _Creator_CreateByStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

func init() { proto.RegisterFile("grpc/proto/servicepq.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 186 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x2f, 0x2a, 0x48,
	0xd6, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0xd7, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0x4c, 0x4e, 0x2d, 0x28,
	0xd4, 0x03, 0xf3, 0x85, 0x58, 0x2a, 0x4b, 0x0b, 0x32, 0x95, 0x94, 0xb8, 0xf8, 0x7c, 0x53, 0x8b,
	0x8b, 0x13, 0xd3, 0x53, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x04, 0xb8, 0x98, 0x73,
	0x8b, 0xd3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x40, 0x4c, 0x25, 0x53, 0x2e, 0x7e, 0xb8,
	0x9a, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x3e, 0x2e, 0xa6, 0xcc, 0x14, 0xb0, 0x1a, 0xe6,
	0x20, 0x20, 0x4b, 0x48, 0x88, 0x8b, 0xa5, 0x24, 0x33, 0x37, 0x55, 0x82, 0x09, 0xac, 0x0b, 0xcc,
	0x36, 0x6a, 0x67, 0xe4, 0x62, 0x77, 0x2e, 0x4a, 0x4d, 0x2c, 0xc9, 0x2f, 0x12, 0x32, 0xe7, 0x62,
	0x03, 0x33, 0x53, 0x85, 0x44, 0xf4, 0x40, 0xf6, 0xea, 0xa1, 0x5a, 0x2a, 0x25, 0x8a, 0x26, 0x0a,
	0xb1, 0x46, 0x89, 0x41, 0xc8, 0x99, 0x8b, 0x0f, 0xa2, 0xd1, 0xa9, 0x32, 0xb8, 0x04, 0xc8, 0xc8,
	0x25, 0xd1, 0x00, 0x0d, 0x46, 0x03, 0xc6, 0x24, 0x36, 0xb0, 0x8f, 0x8d, 0x01, 0x01, 0x00, 0x00,
	0xff, 0xff, 0xf1, 0x06, 0x20, 0x2c, 0x0f, 0x01, 0x00, 0x00,
}
